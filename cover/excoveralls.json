{"source_files":[{"name":"lib/cologne_phonetic_ex.ex","source":"defmodule ColognePhoneticEx do\n  @moduledoc \"\"\"\n  \n  **Cologne phonetics** (also Kölner Phonetik, Cologne process) is a phonetic\n  algorithm which assigns to words a sequence of digits, the phonetic code.\n  The aim of this procedure is that identical sounding words have the same code\n  assigned to them. The algorithm can be used to perform a similarity search\n  between words. For example, it is possible in a name list to find entries\n  like \"Meier\" under different spellings such as \"Maier\", \"Mayer\", or \"Mayr\".\n  The Cologne phonetics is related to the well known Soundex\n  phoneticalgorithm but is optimized to match the German language.\n\n  [de.wikipedia.org/wiki/Kölner_Phonetik](http://de.wikipedia.org/wiki/Kölner_Phonetik)\n  \"\"\"\n  require Logger\n\n @cologne_phonetic_table %{\n   \"a\" => \"0\",\n   \"ä\" => \"0\",\n   \"e\" => \"0\",\n   \"i\" => \"0\",\n   \"j\" => \"0\",\n   \"o\" => \"0\",\n   \"ö\" => \"0\",\n   \"u\" => \"0\",\n   \"ü\" => \"0\",\n   \"y\" => \"0\",\n   \"b\" => \"1\",\n   \"f\" => \"3\",\n   \"v\" => \"3\",\n   \"w\" => \"3\",\n   \"g\" => \"4\",\n   \"k\" => \"4\",\n   \"q\" => \"4\",\n   \"l\" => \"5\",\n   \"m\" => \"6\",\n   \"n\" => \"6\",\n   \"r\" => \"7\",\n   \"s\" => \"8\",\n   \"z\" => \"8\"\n }\n\n  @doc \"\"\"\n  Calculates and returns the \"Cologne Phonetic\" (Kölner Phonetik) code for the given string.\n  It's the phonetic code for the  German language.\n\n  ## Examples\n\n      iex> ColognePhoneticEx.as_cologne_phonetic(\"Bühler\")\n      \"157\"\n\n  \"\"\"\n  @spec as_cologne_phonetic(String) :: String\n  def as_cologne_phonetic(term) do\n    case term do\n      nil ->\n        \"\"\n      \"\" ->\n        \"\"\n      term ->\n        i = 0\n        term_downcase = String.downcase(term)\n        phonetic_string = each_char(i,\n          String.graphemes(term_downcase), term_downcase, \" \", \"\")\n        trimmed_phonetic_string = String.replace(phonetic_string, \" \", \"\")\n        trimmed_phonetic_string = \n          String.replace(trimmed_phonetic_string, \"0\", \"\")\n        trimmed_phonetic_string\n    end\n  end\n\n  defp each_char(_, [], _, _, current) do\n    current\n  end\n\n  @spec each_char(Integer, [String | String], String, String, String) :: String\n  defp each_char(i, [head | tail], term, previous_code, current) do\n    previous = if i > 0 do\n      String.at(term, (i - 1))\n    else\n      \" \"\n    end\n    follower = if i < (String.length(term) - 1) do\n      String.at(term, (i + 1))\n    else\n      \" \"\n    end\n    code = if Map.has_key?(@cologne_phonetic_table, head) do\n      @cologne_phonetic_table[head]\n    else\n    case head do\n      \"h\" ->\n        \" \"\n      \"p\" ->\n        if follower == \"h\" do\n          \"3\"\n        else\n          \"1\"\n        end\n      \"d\" ->\n        if ((follower == \"c\") || (follower == \"s\") || (follower == \"z\") || (follower == \"ß\")) do\n          \"8\"\n        else\n          \"2\"\n        end\n      \"t\" ->\n        if ((follower == \"c\") || (follower == \"s\") || (follower == \"z\") || (follower == \"ß\")) do\n          \"8\"\n        else\n          \"2\"\n        end\n        \"c\" ->\n          if i == 1 do\n            if ((follower == \"a\") || (follower == \"h\") || (follower == \"k\") || (follower == \"l\")\n              || (follower == \"o\")  || (follower == \"q\")   || (follower == \"r\")  || (follower == \"u\") || (follower == \"x\")) do\n              \"8\"\n            else\n              \"4\"\n            end\n          else\n            if ((previous == \"s\") || (previous == \"z\") || (previous == \"ß\")) do\n              if ((follower == \"a\") || (follower == \"h\") || (follower == \"k\")\n                || (follower == \"o\")  || (follower == \"q\") || (follower == \"u\") || (follower == \"x\")) do\n                \"8\"\n              else\n                \"4\"\n              end\n            else\n              \"8\"\n            end\n          end\n        \"x\" ->\n          if ((previous == \"c\") || (previous == \"k\") || (previous == \"q\")) do\n            \"8\"\n          else\n            \"48\"\n          end\n        _ ->\n          \" \"\n        end\n    end\n    phonetic_string = if previous_code != code do\n      current <> to_string(code)\n    else\n      current\n    end\n    each_char(i + 1, tail, term, code, phonetic_string)\n  end\n\nend","coverage":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,20,null,null,null,null,null,18,18,18,null,18,18,null,18,null,null,null,null,18,null,null,null,null,125,107,null,null,null,125,107,null,null,null,125,99,null,26,null,null,null,1,null,null,null,null,null,9,null,null,null,null,null,2,null,null,null,null,null,3,1,1,null,null,null,null,null,2,2,2,null,null,null,null,null,null,null,null,null,0,null,null,null,null,null,null,null,null,125,112,null,13,null,125,null,null,null]}]}